<?php

/**
 * Implementation of hook_menu().
 */
function msa_member_menu() {
  $items = array();
  $items['admin/list-members'] = array(
    'page callback' => 'msa_member_list',
    'access arguments' => array('administer users'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/send-reminders'] = array(
    'page callback' => 'msa_member_send_reminders',
    'access arguments' => array('administer users'),
    'type' => MENU_CALLBACK,
  );
  $items['membership'] = array(
    'page callback' => 'msa_member_membership_page',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_cron().
 */
function msa_member_cron() {
  // Send membership reminders, not in debug mode:
  msa_member_send_reminders(FALSE);
}

/**
 * Check if the logged-in user is a member of the MSA.
 * 
 * @return bool
 */
function msa_member_user_is_member() {
  global $user;
  return user_is_logged_in() && in_array('member', $user->roles);
}

/**
 * Check if the logged-in user was a member of the MSA.
 * 
 * @return bool
 */
function msa_member_user_is_former_member() {
  global $user;
  return user_is_logged_in() && in_array('former member', $user->roles);
}

/**
 * Check if the logged-in user is or was a member of the MSA.
 * 
 * @return bool
 */
function msa_member_user_is_or_was_member() {
  return msa_member_user_is_member() || msa_member_user_is_former_member();
}

/**
 * Implements hook_form_alter().
 */
function msa_member_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'commerce_cart_add_to_cart_form_5_2_1_4_3_10_7_6_9_8') {
    global $user;
    $user = user_load($user->uid);
    
    //dpm($form);
    //$form['attributes']['field_membership_level']['#default_value'] = 'regular';
    //$form['unchanged_attributes']['field_membership_level']['#default_value'] = 'regular';

    // Don't do these checks if running cron, as they trigger a redirect during node_update_index().
    if ($_SERVER['SCRIPT_NAME'] != '/cron.php') {
      // If the user is not logged in, don't let them pay membership fees yet:
      if (!user_is_logged_in()) {
        drupal_set_message('Please ' . l('login', 'user') . ' or ' . l('create an account', 'user/register') . ' before paying membership fees.', 'warning');
        drupal_goto('user', array('query' => array('destination' => 'membership/select')));
      }

      // If the user has not completed their contact info, don't let them pay membership fees yet:
      $contact_details_complete = msa_member_contact_details_done($contact_details_incomplete);
      if (!$contact_details_complete) {

        if (in_array('phone', $contact_details_incomplete)) {
          drupal_set_message('Please update your phone number before paying membership fees.', 'warning');
        }
        
        if (in_array('address name', $contact_details_incomplete)) {
          drupal_set_message('Please update your postal address full name before paying membership fees.', 'warning');
        }

        if (in_array('address street', $contact_details_incomplete)) {
          drupal_set_message('Please update your postal address street before paying membership fees.', 'warning');
        }

        if (in_array('address city', $contact_details_incomplete)) {
          drupal_set_message('Please update your postal address city before paying membership fees.', 'warning');
        }

        drupal_goto("user/$user->uid/edit", array('query' => array('destination' => 'membership/select')));
      }
    }

    // Create a JS variable to indicate if the user is or was an MSA member, and can therefore qualify for the
    // renewing membership rate:
    $is_or_was_member = msa_member_user_is_or_was_member() ? 'true' : 'false';
    drupal_add_js(array('msa' => array('is_or_was_member' => $is_or_was_member)), 'setting');

    // Include the JS for this form:
    drupal_add_js(drupal_get_path('module', 'msa_member') . '/js/msa_member.autoselect.js');

    // Add custom validation handler:
    $form['#validate'][] = 'msa_member_add_to_cart_validate';
    //      $form['#ajax']['callback'][] = 'hello';
  }
}

/**
 * hook_commerce_cart_attributes_refresh_alter(&$commands, $form, $form_state).
 */
function msa_member_commerce_cart_attributes_refresh_alter(&$commands, $form, $form_state) {
  //dpm($form);
  //$form['attributes']['field_membership_level']['#default_value'] = 'regular';
  // Display an alert message showing the new default product ID.
  //$commands[] = ajax_command_alert(t('Now defaulted to product @product_id.', array('@product_id' => $form['product_id']['#value'])));
}

/**
 * Custom validation handler for membership add to cart form.
 * Just checks that they selected the correctmembership type (New or Renewing).
 * 
 * @param type $form
 * @param type $form_state 
 */
function msa_member_add_to_cart_validate($form, &$form_state) {
  // If the user is not logged in, don't let them pay membership fees:
  global $user;
  if (!user_is_logged_in()) {
    drupal_set_message('Please ' . l('login', 'user') . ' or ' . l('create an account', 'user/register') . ' before paying membership fees.', 'warning');
    drupal_goto('user');
  }

  // Check they chose the correct membership type:
  if (msa_member_user_is_member() && $form_state['values']['attributes']['field_membership_type'] == 'new') {
    form_set_error('', t("As you are an MSA member, please choose the 'Renewing' option."));
  }
  elseif (msa_member_user_is_former_member() && $form_state['values']['attributes']['field_membership_type'] == 'new') {
    form_set_error('', t("As you are a former MSA member, please choose the 'Renewing' option."));
  }
  elseif (!msa_member_user_is_or_was_member() && $form_state['values']['attributes']['field_membership_type'] == 'renewing') {
    form_set_error('', t("As you have never been an MSA member, please choose the 'New' option. If this is incorrect, please <a href='/contact'>let us know</a>."));
  }
}

/**
 * Implements hook_rules_action_info(). 
 */
function msa_member_rules_action_info() {
  return array(
    'msa_member_update' => array(
      'label' => t('Update MSA membership dates and roles'),
      'group' => t('MSA'),
      'parameter' => array(
        'user' => array(
          'label' => t('The user to update'),
          'type' => 'user',
        ),
      ),
      'callbacks' => array(
        'execute' => 'msa_member_update_rules_action',
      ), 
    ),
  );
}

/**
 * Update the user's membership dates and roles.
 * 
 * @param object $user
 */
function msa_member_update_rules_action($user) {
  require_once DRUPAL_ROOT . '/sites/all/classes/XDateTime.php';
  
  // Get today's date:
  $today = XDateTime::today();
  
  /////////////////////////////////////////////////////////////
  // Membership start date.

  // If not set already, set to today.
  $start_date_set = FALSE;
  $old_start_date = isset($user->field_user_member_start[LANGUAGE_NONE][0]['value']) ? $user->field_user_member_start[LANGUAGE_NONE][0]['value'] : NULL;
  if (!$old_start_date) {
    $user->field_user_member_start[LANGUAGE_NONE][0]['value'] = $today->format('Y-m-d');
    watchdog('msa', "Set membership start date for $user->name to " . $user->field_user_member_start[LANGUAGE_NONE][0]['value']);
    $start_date_set = TRUE;
  }
  else {
    // Convert to XDateTime:
    $old_start_date = new XDateTime($old_start_date);
  }
  $new_start_date = new XDateTime($user->field_user_member_start[LANGUAGE_NONE][0]['value']);
  
  /////////////////////////////////////////////////////////////
  // Membership expiry date.

  // By default new year of membership starts now:
  $new_expiry_date = clone $today;
  
  // If their membership expiry is already set, and is later than now, start the membership period from that:
  $old_expiry_date = isset($user->field_user_member_expiry[LANGUAGE_NONE][0]['value']) ? $user->field_user_member_expiry[LANGUAGE_NONE][0]['value'] : NULL;
  if ($old_expiry_date) {
    // Convert to XDateTime:
    $old_expiry_date = new XDateTime($old_expiry_date);
    // If the old expiry date is later than today, make it the beginning of the new membership period:
    if ($old_expiry_date > $today) {
      $new_expiry_date = clone $old_expiry_date;
    }
  }

  // Add 1 year to the date:
  $new_expiry_date->addYears(1);

  // Convert to YYYY-MM-DD format for writing to the database:
  $user->field_user_member_expiry[LANGUAGE_NONE][0]['value'] = $new_expiry_date->format('Y-m-d');
  watchdog('msa', "Updating membership expiry date for $user->name to " . $user->field_user_member_expiry[LANGUAGE_NONE][0]['value']);
  
  /////////////////////////////////////////////////////////////
  // Remember some stuff for the email:
  $was_member = in_array('member', $user->roles);
  $was_former_member = in_array('former member', $user->roles);
  $format = 'j F Y';
  $_SESSION['membership'] = array(
    'old start date'    => $old_start_date ? $old_start_date->format($format) : NULL,
    'new start date'    => $new_start_date->format($format),
    'start date set'    => $start_date_set,
    'old expiry date'   => $old_expiry_date ? $old_expiry_date->format($format) : NULL,
    'new expiry date'   => $new_expiry_date->format($format),
    'is former member'  => $was_former_member,
    'is member'         => $was_member,
    'is new member'     => !$was_member && !$was_former_member,
  );

  /////////////////////////////////////////////////////////////
  // Roles.
  
  // Remove 'former member' role if present:
  $user->roles = array_diff($user->roles, array('former member'));
  
  // Add 'member' role if not present:
  if (!in_array('member', $user->roles)) {
    $member_role = user_role_load_by_name('member');
    $user->roles[$member_role->rid] = 'member';
  }
  
  // Update the user:
  user_save($user);
}

/**
 * Generate the email to send to the customer when they pay their membership fees.
 * 
 * @todo HTML version
 * 
 * @param object $commerce_order
 * @param bool $html
 * @return string
 */
function msa_member_notification_email($commerce_order, $html = FALSE) {
  global $base_url;
  $msg = '';
  $membership = $_SESSION['membership'];
  
  $user = user_load($commerce_order->uid);
  $msg .= "Hi, $user->name\n\n";
  
  // Thank you message:
  if ($membership['is former member']) {
    $msg .= "Thanks for renewing your membership with MSA!\n\n";
  }
  elseif ($membership['is member']) {
    $msg .= "Thanks for continuing your membership with MSA!\n\n";
  }
  elseif ($membership['is new member']) {
    $msg .= "Thanks for joining MSA, and welcome!\n\n";
  }

  foreach ($commerce_order->commerce_line_items[LANGUAGE_NONE][0] as $key => $value) {
    $line_item = commerce_line_item_load($value);
    $product_id = $line_item->commerce_product[LANGUAGE_NONE][0]['product_id'];
    $product = commerce_product_load($product_id);
    if ($product->type == 'membership') {
      $msg .= "Membership type: $product->title\n";
      $msg .= "SKU: $product->sku\n";
      $unit_price = msa_shop_money_format($line_item->commerce_unit_price[LANGUAGE_NONE][0]['amount']);
      $msg .= "Price: $unit_price\n\n";
      break;
    }
  }
  
  // Start date:
  if ($membership['start date set']) {
    $msg .= "Your membership start date has been set to {$membership['new start date']}.\n";
  }

  // Expiry date:
  if ($membership['old expiry date']) {
    $msg .= "Your membership expiry date was {$membership['old expiry date']}.\n";
    $msg .= "It has been updated to {$membership['new expiry date']}.\n";
  }
  else {
    $msg .= "Your membership expiry date is {$membership['new expiry date']}.\n";
  }
  $msg .= "You will be reminded to renew your membership before that date.\n\n";
  
  $msg .= "The financial support of our members goes towards exciting Mars-related research and educational projects,";
  $msg .= " such as the Marsupial rover and MARS-Oz.\n";
  $msg .= "Membership also entitles you to reduced ticket price for the Australian Mars Exploration Conference,";
  $msg .= " and enables you participate more fully in the website and in projects.\n\n";
  
  $msg .= "If you ever have questions about your membership, please contact: secretary@marssociety.org.au\n\n";
  
  $msg .= "With gratitude,\nMars Society Australia";
  return $msg;
}

/**
 * Generate the email to send to the secretary/treasurer when a member pays their fees.
 * 
 * @todo HTML version
 * 
 * @param object $commerce_order
 * @param bool $html
 * @return string
 */
function msa_member_admin_notification_email($commerce_order, $html = FALSE) {
  global $base_url;
  $msg = '';
  $membership = $_SESSION['membership'];
  
  $user = user_load($commerce_order->uid);
  $name = $user->field_user_address[LANGUAGE_NONE][0]['name_line'] ? $user->field_user_address[LANGUAGE_NONE][0]['name_line'] : $user->name;
  
  // Summary message:
  if ($membership['is former member']) {
    $msg .= "$name, a former member, has renewed their membership with MSA.\n\n";
  }
  elseif ($membership['is member']) {
    $msg .= "$name, a current member, has renewed their membership with MSA.\n\n";
  }
  elseif ($membership['is new member']) {
    $msg .= "$name has joined MSA.\n\n";
  }
  
  foreach ($commerce_order->commerce_line_items[LANGUAGE_NONE][0] as $key => $value) {
    $line_item = commerce_line_item_load($value);
    $product_id = $line_item->commerce_product[LANGUAGE_NONE][0]['product_id'];
    $product = commerce_product_load($product_id);
    if ($product->type == 'membership') {
      $msg .= "Membership type: $product->title\n";
      $msg .= "SKU: $product->sku\n";
      $unit_price = msa_shop_money_format($line_item->commerce_unit_price[LANGUAGE_NONE][0]['amount']);
      $msg .= "Price: $unit_price\n\n";
      break;
    }
  }

  // Start date:
  if ($membership['start date set']) {
    $msg .= "Their membership start date has been set to {$membership['new start date']}.\n";
  }

  // Expiry date:
  if ($membership['old expiry date']) {
    $msg .= "Their membership expiry date was {$membership['old expiry date']}.\n";
    $msg .= "It has been updated to {$membership['new expiry date']}.\n";
  }
  else {
    $msg .= "Their membership expiry date is {$membership['new expiry date']}.\n";
  }
  return $msg;
}

/**
 * Check if a user has filled in their contact details.
 * 
 * @return bool
 */
function msa_member_contact_details_done(&$incomplete_fields) {
  global $user;
  
  $incomplete_fields = array();
  
  if (empty($user->field_user_phone[LANGUAGE_NONE][0]['value'])) {
    $incomplete_fields[] = 'phone';
  }
  
  if (empty($user->field_user_address[LANGUAGE_NONE][0]['name_line'])) {
    $incomplete_fields[] = 'address name';
  }
  
  if (empty($user->field_user_address[LANGUAGE_NONE][0]['thoroughfare'])) {
    $incomplete_fields[] = 'address street';
  }
  
  if (empty($user->field_user_address[LANGUAGE_NONE][0]['locality'])) {
    $incomplete_fields[] = 'address city';
  }
  
  // $user->field_user_address[LANGUAGE_NONE][0]['country'];  non-empty by default

  return !$incomplete_fields;
}

/**
 * HTML for Membership checklist.
 * 
 * @return string 
 */
function msa_member_checklist() {
  $logged_in = user_is_logged_in();
  $query = array('query' => array('destination' => 'membership'));
  $logged_in_link = $logged_in ? 'Login or create an account' : (l('Login', 'user', $query) . " or " . l('create an account', 'user/register', $query));
  
  $contact_details = FALSE;
  $fees_paid = FALSE;
  
  if ($logged_in) {
    global $user;
    $user = user_load($user->uid);
    require_once DRUPAL_ROOT . '/sites/all/classes/XDateTime.php';
    
    // Check if the user has filled in some contact info:
    $contact_details_done = msa_member_contact_details_done($contact_details_incomplete);

    // Check if the user is a current paid-up member:
    $expiry_date = $user->field_user_member_expiry[LANGUAGE_NONE][0]['value'] ? new XDateTime($user->field_user_member_expiry[LANGUAGE_NONE][0]['value']) : NULL;
    $expired = $expiry_date ? $expiry_date < XDateTime::today() : TRUE;
    $fees_paid = in_array('member', $user->roles) && !$expired;
  }

  $contact_details_text = t('Update your phone number and postal address');
  $contact_details_link = $logged_in ? l($contact_details_text, "user/$user->uid/edit", $query) : $contact_details_text;
  
  $fees_paid_text = t('Pay membership fees');
  $fees_paid_link = ($logged_in && $contact_details_done) ? l($fees_paid_text, 'membership/select', $query) : $fees_paid_text;
  
  $check_green = "<img src='/" . drupal_get_path('theme', 'msa_zen') . "/images/check-green.png' width='24' height='24'>";
  $check_grey = "<img src='/" . drupal_get_path('theme', 'msa_zen') . "/images/check-grey.png' width='24' height='24'>";
  
  $html = "
    <table id='member-checklist' class='membership-table'>
      <tr>
        <td class='member-checklist-num'>1</td>
        <td class='member-checklist-link'>$logged_in_link</td>
        <td class='member-checklist-check'>" . ($logged_in ? $check_green : $check_grey) . "</td>
      </tr>
      <tr>
        <td class='member-checklist-num'>2</td>
        <td class='member-checklist-link'>$contact_details_link</td>
        <td class='member-checklist-check'>" . ($contact_details_done ? $check_green : $check_grey) . "</td>
      </tr>
      <tr>
        <td class='member-checklist-num'>3</td>
        <td class='member-checklist-link'>$fees_paid_link</td>
        <td class='member-checklist-check'>" . ($fees_paid ? $check_green : $check_grey) . "</td>
      </tr>
    </table>";
  
  return $html;
}

/**
 * Simply list users and email addresses.
 */
function msa_member_list() {
  $sql = "SELECT name, mail FROM users ORDER BY name";
  $rs = db_query($sql);
  echo "<pre>";
  foreach ($rs as $rec) {
    echo str_pad($rec->name, 20, ' ', STR_PAD_RIGHT) . $rec->mail . "\n";
  }
  echo "</pre>";
}

/**
 * Implements hook_rules_event_info().
 */
//function msa_member_rules_event_info() {
//  $events = array();
//  $events['membership_expire'] = array(
//    'label' => t('When a membership expiry date has passed'),
//    'group' => t('Membership'),
//  );
//  return $events;
//}

/**
 * Get a field from a user's address.
 * 
 * @param int $uid
 * @param string $field
 * @return string
 */
function msa_member_address_field($uid, $field) {
  $user = user_load($uid);
  return $user->field_user_address[LANGUAGE_NONE][0][$field];
}

/**
 * Get a user's state and country.
 * 
 * @param int $uid
 * @return string
 */
function msa_member_state_country($uid) {
  require_once DRUPAL_ROOT . '/includes/locale.inc';
  $state = msa_member_address_field($uid, 'administrative_area');
  $country = msa_member_address_field($uid, 'country');
  if ($country) {
    $countries = country_get_list();
    $country = $countries[$country];
  }
  return implode(', ', array_filter(array(trim($state), trim($country))));
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Emails

/**
 * Implements hook_mail().
 *
 * @param $key
 * @param $message
 * @param $params
 */
function msa_member_mail($key, &$message, $params) {
  $data['user'] = $params['account'];
  $options['language'] = $message['language'];
  user_mail_tokens($variables, $data, $options);

  $site_name =  variable_get('site_name');
  $renewal_url = 'http://marssociety.org.au/membership/select';

  switch($key) {
    case '0d_reminder':
      if ($params['expiry_date_str'] == $params['today_str']) {
        $variables['reminder_message'] = "Your MSA membership expires today ({$params['expiry_date_str']}).";
      }
      else {
        $variables['reminder_message'] = "Your MSA membership has expired ({$params['expiry_date_str']}).";
      }
      break;

    case '7d_reminder':
    case '30d_reminder':
      $variables['reminder_message'] = "Your MSA membership expires in {$params['days_until_expiry']} days ({$params['expiry_date_str']}).";
      break;
  }

  if ($variables['reminder_message']) {
    $langcode = $message['language']->language;
    $message['subject'] = t('Membership reminder from !site', array('!site' => $site_name));
    $message['body'][] = t("<div style='font-size: 12px;'><p>Dear !username</p>
<p>This is an automated message from the MSA website.</p>
<p><strong>!reminder_message</strong></p>
<p>MSA relies on membership fees and donations to fund its projects, including:</p>
<ul>
  <li>Administering and operating the Society</li>
  <li>Spaceward Bound Australia, providing opportunities for Australian teachers and students to work with NASA
    scientists in the field</li>
  <li>Marsupial, our all-Australian Mars rover</li>
  <li>MARS-Oz, our Mars Analog Research Station</li>
</ul>
<p>Every renewing member makes a difference.</p>
<p>At this time we're working hard to raise the remaining few thousand dollars necessary to complete our
 ground-breaking Marsupial rover.</p>
<p>If you would like to renew your membership, please go here:</p>
<p>!renewal_url</p>
<p>Thank you for your support! We exist for, and thanks to, our members.</p>
<p>Best regards,<br>
  The MSA web team</p>
<p>
<a href='http://marssociety.org.au'>Visit our website for all the latest news</a><br>
<a href='https://www.facebook.com/groups/marssocietyaustralia/'>Join in the conversation on Facebook</a><br>
<a href='https://twitter.com/marssocietyoz'>Follow us on Twitter</a><br>
</p></div>",
      array(
        '!username' => $params['account']->name,
        '!reminder_message' => $variables['reminder_message'],
        '!renewal_url' => $renewal_url
      ),
      array(
        'langcode' => $langcode
      ));
    // Copy us in on these emails:
    $message['headers'] = array(
      'Cc' => 'gmmurphy@ozemail.com.au, Jon.Clarke@bigpond.com',
    );
  }
}

/**
 * Send membership reminders.
 */
function msa_member_send_reminders($dbg_mode = NULL) {
  if (is_null($dbg_mode)) {
    $dbg_mode = isset($_GET['dbg']) ? (bool) $_GET['dbg'] : TRUE;
  }

  dbg_set_mode($dbg_mode);

  require_once DRUPAL_ROOT . '/sites/all/classes/XDateTime.php';
  $today = XDateTime::today();
  $today_str = $today->format('j F Y');
  dbg($today, '$today');
  dbg($today_str, '$today_str');

  // Send membership renewal reminders.
  // Loop through all active user accounts.
  $q = db_select('users', 'u')
    ->fields('u', array('uid'))
    ->condition('uid', array(0, 1), 'NOT IN')
    ->condition('status', 1)
    ->orderBy('uid');

  if ($dbg_mode) {
    $q->condition('name', 'Shaun Moss');
  }

  $rs = $q->execute();
  foreach ($rs as $rec) {
    $account = user_load($rec->uid);
    $account_modified = FALSE;
    dbg($account->name);
    dbg($account->field_user_member_expiry[LANGUAGE_NONE][0]['value']);

    // If the person doesn't have a membership expiry date, then they haven't joined yet. Skip them.
    if (!$account->field_user_member_expiry[LANGUAGE_NONE][0]['value']) {
      continue;
    }

    // Get their membership expiry date:
    $expiry_date = new XDateTime($account->field_user_member_expiry[LANGUAGE_NONE][0]['value']);
    $expiry_date_str = $expiry_date->format('j F Y');
    dbg($expiry_date, '$expiry_date');
    dbg($expiry_date_str, '$expiry_date_str');

    // How many days until expiry?
    $days_until_expiry = $expiry_date->diffDays($today);
    dbg("$days_until_expiry days until membership expiry");

    dbg($account->field_0d_reminder_sent[LANGUAGE_NONE][0]['value'], '0d');
    dbg($account->field_7d_reminder_sent[LANGUAGE_NONE][0]['value'], '7d');
    dbg($account->field_30d_reminder_sent[LANGUAGE_NONE][0]['value'], '30d');

    $mail_params = array(
      'account' => $account,
      'today' => $today,
      'today_str' => $today_str,
      'expiry_date' => $expiry_date,
      'expiry_date_str' => $expiry_date_str,
      'days_until_expiry' => $days_until_expiry,
    );

    //drupal_mail($module, $key, $to, $language, $params = array(), $from = NULL, $send = TRUE)
    
    // If membership has expired:
    if ($days_until_expiry <= 0) {
      dbg('$days_until_expiry <= 0');
      // If 0-day reminder not sent:
      if (!$account->field_0d_reminder_sent[LANGUAGE_NONE][0]['value']) {
        dbg('0-day reminder not sent, sending now.');
        // Send 0-day reminder.
        drupal_mail('msa_member', '0d_reminder', $account->mail, language_default(), $mail_params);
        // Set field "0-day renewal reminder sent" to TRUE.
        $account->field_0d_reminder_sent[LANGUAGE_NONE][0]['value'] = 1;
        $account_modified = TRUE;
      }
      else {
        dbg('0-day reminder already sent.');
      }
    }
    // If membership has not expired but expires in < 1 week:
    elseif ($days_until_expiry <= 7) {
      dbg('$days_until_expiry <= 7');
      // If 7-day reminder not sent:
      if (!$account->field_7d_reminder_sent[LANGUAGE_NONE][0]['value']) {
        dbg('7-day reminder not sent, sending now.');
        // Send 7-day reminder.
        drupal_mail('msa_member', '7d_reminder', $account->mail, language_default(), $mail_params);
        // Set field "7-day renewal reminder sent" to TRUE.
        $account->field_7d_reminder_sent[LANGUAGE_NONE][0]['value'] = 1;
        $account_modified = TRUE;
      }
      else {
        dbg('7-day reminder already sent.');
      }
      // Set field "0-day renewal reminder sent" to FALSE:
      if ($account->field_0d_reminder_sent[LANGUAGE_NONE][0]['value']) {
        $account->field_0d_reminder_sent[LANGUAGE_NONE][0]['value'] = 0;
        $account_modified = TRUE;
      }
    }
    // If membership expires in < 1 month but > 1 week:
    elseif ($days_until_expiry <= 30) {
      dbg('$days_until_expiry <= 30');
      // If 30-day reminder not sent:
      if (!$account->field_30d_reminder_sent[LANGUAGE_NONE][0]['value']) {
        dbg('30-day reminder not sent, sending now.');
        // Send 30-day reminder.
        drupal_mail('msa_member', '30d_reminder', $account->mail, language_default(), $mail_params);
        // Set field "30-day renewal reminder sent" to TRUE.
        $account->field_30d_reminder_sent[LANGUAGE_NONE][0]['value'] = 1;
        $account_modified = TRUE;
      }
      else {
        dbg('30-day reminder already sent.');
      }
      // Set field "7-day renewal reminder sent" to FALSE:
      if ($account->field_7d_reminder_sent[LANGUAGE_NONE][0]['value']) {
        $account->field_7d_reminder_sent[LANGUAGE_NONE][0]['value'] = 0;
        $account_modified = TRUE;
      }
      // Set field "0-day renewal reminder sent" to FALSE:
      if ($account->field_0d_reminder_sent[LANGUAGE_NONE][0]['value']) {
        $account->field_0d_reminder_sent[LANGUAGE_NONE][0]['value'] = 0;
        $account_modified = TRUE;
      }
    }
    // If membership expires in > 1 month::
    elseif ($days_until_expiry > 30) {
      // Reset reminder flags:
      dbg('$days_until_expiry > 30. No reminder necessary. Resetting reminder flags.');
      // Set field "30-day renewal reminder sent" to FALSE.
      if ($account->field_30d_reminder_sent[LANGUAGE_NONE][0]['value']) {
        $account->field_30d_reminder_sent[LANGUAGE_NONE][0]['value'] = 0;
        $account_modified = TRUE;
      }
      // Set field "7-day renewal reminder sent" to FALSE.
      if ($account->field_7d_reminder_sent[LANGUAGE_NONE][0]['value']) {
        $account->field_7d_reminder_sent[LANGUAGE_NONE][0]['value'] = 0;
        $account_modified = TRUE;
      }
      // Set field "0-day renewal reminder sent" to FALSE.
      if ($account->field_0d_reminder_sent[LANGUAGE_NONE][0]['value']) {
        $account->field_0d_reminder_sent[LANGUAGE_NONE][0]['value'] = 0;
        $account_modified = TRUE;
      }
    }

    dbg($account->field_0d_reminder_sent[LANGUAGE_NONE][0]['value'], '0d');
    dbg($account->field_7d_reminder_sent[LANGUAGE_NONE][0]['value'], '7d');
    dbg($account->field_30d_reminder_sent[LANGUAGE_NONE][0]['value'], '30d');

    // Save the user account if modified:
    if ($account_modified) {
      dbg('updating user');
      user_save($account);
    }

    dbg_hr();
  }
}

/**
 * Generate the membership rates and checklist page.
 *
 * @return string
 */
function msa_member_membership_page() {
  $html = "
    <div id='membership'>
      <h1>Joining MSA</h1>
      <p>Various types of membership are available:</p>";

  $query = db_select('commerce_product', 'cp');
  $query->addField('cp', 'title', 'title');
  
  $query->join('field_data_commerce_price', 'fdcp', 'fdcp.entity_id = cp.product_id');
  $query->addField('fdcp', 'commerce_price_amount', 'amount');
  $query->condition('fdcp.entity_type', 'commerce_product');
  
  $result = $query->execute();
  
  //Regular, Family, Student, Senior, Contributing
  $fees = array();
  foreach ($result as $row) {
    $title = explode('-', $row->title);
    $title[0] = str_replace('Member', '', $title[0]);
    $title[0] = trim($title[0]);
    $title[1] = trim($title[1]);
    $row->amount = $row->amount / 100;
    $fees[$title[1]][$title[0]] =  $row->amount;
  }
  
  $fee_output = '<table id="membership-rates" class="membership-table">';
  $fee_output .= '<tr><th>Type</th><th>New</th><th>Renewing</th></tr>';
  $fee_output .= '<tr>';
  $fee_output .= '<td>Regular</td>';
  $fee_output .= '<td class="price">A$' . $fees['Regular']['New'] . '</td>';
  $fee_output .= '<td class="price">A$' . $fees['Regular']['Renewing'] . '</td>';
  $fee_output .= '</tr>';
  $fee_output .= '<tr>';
  $fee_output .= '<td>Family</td>';
  $fee_output .= '<td class="price">A$' . $fees['Family']['New'] . '</td>';
  $fee_output .= '<td class="price">A$' . $fees['Family']['Renewing'] . '</td>';
  $fee_output .= '</tr>';
  $fee_output .= '<tr>';
  $fee_output .= '<td>Student</td>';
  $fee_output .= '<td class="price">A$' . $fees['Student']['New'] . '</td>';
  $fee_output .= '<td class="price">A$' . $fees['Student']['Renewing'] . '</td>';
  $fee_output .= '</tr>';
  $fee_output .= '<tr>';
  $fee_output .= '<td>Senior</td>';
  $fee_output .= '<td class="price">A$' . $fees['Senior']['New'] . '</td>';
  $fee_output .= '<td class="price">A$' . $fees['Senior']['Renewing'] . '</td>';
  $fee_output .= '</tr>';
  $fee_output .= '<tr>';
  $fee_output .= '<td>Contributing</td>';
  $fee_output .= '<td class="price">A$' . $fees['Contributing']['New'] . '</td>';
  $fee_output .= '<td class="price">A$' . $fees['Contributing']['Renewing'] . '</td>';
  $fee_output .= '</tr>';
  $fee_output .= '</table>';
  
  $html .= $fee_output;

  $html .= "<a class='button' href='/membership/select'>Pay fees now</a>";

  $html .= "
    <p>&nbsp;</p>
    <p>Membership of Mars Society Australia offers the following benefits:</p>
    <ul id='member-benefits'>
      <li>For <b>new</b> members, all have the option of the following as joining gifts:
        <ul>
          <li>The latest copy of Dr Robert Zubrin&#39;s book &quot;The Case For Mars&quot;, initialled by
            Dr. Zubrin, or</li>
          <li>A copy of Guy Murphy&#39;s book, &quot;Mars, A Survival Guide&quot;.</li>
        </ul>
      </li>
      <li>A reduced ticket price for AMEC (Australian Mars Exploration Conference).</li>
      <li>Opportunities to meet with other MSA members at regular branch events and online..</li>
      <li>Opportunities to participate in MSA activities such as Spaceward Bound Australia expeditions, and
        projects such as the Starchaser Rover, MarsSkin and Mars-Oz Habitat.</li><li>The knowledge that you&#39;re
        supporting Australia&#39;s most pro-active and well-respected space advocacy group.</li>
    </ul>
    <p>&nbsp;</p>
    <p>To join MSA or to renew your membership, follow these simple steps:</p>";

  $html .= msa_member_checklist();
  $html .= "<p>Thank you! Becoming a member of MSA means supporting space research and education in Australia.</p></div>";

  return $html;
}
